#include <iostream>
//BINARY SEARCH RECUSRSIVE SARISHA AGGARWAL (102003445) 2CO17
using namespace std;
int binarysearch(int A[],int b,int e,int key){
        int mid;
        mid=(b+e)/2;
        if(key==A[mid])
            return mid;
        else if(key>A[mid])
           return binarysearch(A,mid+1,e,key);
        else    
           return binarysearch(A,b,mid-1,key);
    }
    
int main()
{
    int A[]={1,2,3,4,5,6,7,8,9};
    int n=sizeof A/sizeof A[0];
    int key=5;
    cout<<"Element found at index = "<<binarysearch(&A[0],0,n-1,key)<<endl;
    return 0;
}

#include <iostream>
//MERGE SORT RECUSRSIVE APPROACH SARISHA AGGARWAL (102003445)
using namespace std;
void merge(int A[],int b,int mid,int e){
    int x = mid-b+1;
    int y = e-mid;
    int arr1[x],arr2[y];
    //code for finding union if two arrays
    for(int i=0;i<x;i++){
        arr1[i]=A[b+i];
    }
    for(int i=0;i<y;i++){
        arr2[i]=A[mid+1+i];
    }
    int i=0;
    int j=0;
    int k=b;
    while(i<x && j<y){
        if(arr1[i]<arr2[j]){
            A[k]=arr1[i];
            k++,i++;
        }
        if(arr1[i]>arr2[j]){
            A[k]=arr2[j];
            k++,j++;
        }
        
    }
    while(i<x){
        A[k]=arr1[i];
        k++,i++;
    }
    while(j<y){
        A[k]=arr2[j];
        k++,j++;
    }
    
}

void mergesort(int A[],int b,int e){
    if(b<e){
        int mid=(b+e)/2;
        mergesort(A,b,mid);
        mergesort(A,mid+1,e);
        merge(A,b,mid,e);
    }
}

int main(){
    int A[]={64,38,92,45,22,78,87,10};
    int n= sizeof(A)/sizeof(A[0]);
    mergesort(A,0,n-1);
    for(int i=0;i<n;i++){
        cout<<A[i]<<" ";
    }
    return 0;
}

#include <bits/stdc++.h>
//QUICK SORT RECURSIVE SARISHA AGGARWAL (102003445) 2COE17
using namespace std;
int partition(int a[],int b,int e){
    int pivot=a[e];
    int i=b-1;
    for(int j=b;j<e;j++){
        if(a[j]<pivot){
            i++;
            swap(a[i],a[j]);
        }
    }
    swap(a[i+1],a[e]);
    return i+1;
}
void quicksort(int a[],int b,int e){
    if(e>b){
        int p=partition(a,b,e);
        quicksort(a,b,p-1);
        quicksort(a,p+1,e);
    }
}
int main()
{
    int a[]={6,3,9,5,2,8,7};
    int n=sizeof a/sizeof a[0];
    quicksort(a,0,n-1);
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";
    cout<<endl;
}
